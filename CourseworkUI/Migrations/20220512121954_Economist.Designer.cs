// <auto-generated />
using System;
using CourseworkUI.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseworkUI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220512121954_Economist")]
    partial class Economist
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CourseworkUI.Models.ClientApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceAgentId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfInsuranceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("InsuranceAgentId");

                    b.HasIndex("TypeOfInsuranceId");

                    b.ToTable("ClientApplications");
                });

            modelBuilder.Entity("CourseworkUI.Models.InsuranceRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("InsuranceRisks");
                });

            modelBuilder.Entity("CourseworkUI.Models.Message", b =>
                {
                    b.Property<DateTime>("DateOfDispatch")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CourseworkUI.Models.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostOfTheInsuranceContract")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateOfConclusion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsuranceAgentId")
                        .HasColumnType("int");

                    b.Property<decimal>("InsuranceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TypeOfInsuranceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("InsuranceAgentId");

                    b.HasIndex("TypeOfInsuranceId");

                    b.ToTable("Polices");
                });

            modelBuilder.Entity("CourseworkUI.Models.TypeOfInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("CoefficientOfIncrease")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostOfTheInsuranceContract")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descriprion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InsuranceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TypesOfInsurances");
                });

            modelBuilder.Entity("CourseworkUI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InsuranceRiskTypeOfInsurance", b =>
                {
                    b.Property<int>("ConnectedTypesOfInsuranceId")
                        .HasColumnType("int");

                    b.Property<int>("IncludedRisksId")
                        .HasColumnType("int");

                    b.HasKey("ConnectedTypesOfInsuranceId", "IncludedRisksId");

                    b.HasIndex("IncludedRisksId");

                    b.ToTable("InsuranceRiskTypeOfInsurance");
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.Employee", b =>
                {
                    b.HasBaseType("CourseworkUI.Models.User");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CourseworkUI.Models.Users.Clients.Client", b =>
                {
                    b.HasBaseType("CourseworkUI.Models.User");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("CourseworkUI.Models.Clients.LegalPerson", b =>
                {
                    b.HasBaseType("CourseworkUI.Models.Users.Clients.Client");

                    b.Property<string>("NameOfOrganization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("LegalPersons");
                });

            modelBuilder.Entity("CourseworkUI.Models.Clients.NaturalPerson", b =>
                {
                    b.HasBaseType("CourseworkUI.Models.Users.Clients.Client");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("NaturalPersons");
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.Accountant", b =>
                {
                    b.HasBaseType("CourseworkUI.Models.Employees.Employee");

                    b.ToTable("Accountants");
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.Admin", b =>
                {
                    b.HasBaseType("CourseworkUI.Models.Employees.Employee");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.InsuranceAgent", b =>
                {
                    b.HasBaseType("CourseworkUI.Models.Employees.Employee");

                    b.ToTable("InsuranceAgents");
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.Manager", b =>
                {
                    b.HasBaseType("CourseworkUI.Models.Employees.Employee");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("CourseworkUI.Models.Users.Employees.Economist", b =>
                {
                    b.HasBaseType("CourseworkUI.Models.Employees.Employee");

                    b.ToTable("Economists");
                });

            modelBuilder.Entity("CourseworkUI.Models.ClientApplication", b =>
                {
                    b.HasOne("CourseworkUI.Models.Users.Clients.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseworkUI.Models.Employees.InsuranceAgent", "InsuranceAgent")
                        .WithMany()
                        .HasForeignKey("InsuranceAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseworkUI.Models.TypeOfInsurance", "TypeOfInsurance")
                        .WithMany()
                        .HasForeignKey("TypeOfInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InsuranceAgent");

                    b.Navigation("TypeOfInsurance");
                });

            modelBuilder.Entity("CourseworkUI.Models.Policy", b =>
                {
                    b.HasOne("CourseworkUI.Models.Users.Clients.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseworkUI.Models.Employees.InsuranceAgent", "InsuranceAgent")
                        .WithMany()
                        .HasForeignKey("InsuranceAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseworkUI.Models.TypeOfInsurance", "TypeOfInsurance")
                        .WithMany()
                        .HasForeignKey("TypeOfInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InsuranceAgent");

                    b.Navigation("TypeOfInsurance");
                });

            modelBuilder.Entity("InsuranceRiskTypeOfInsurance", b =>
                {
                    b.HasOne("CourseworkUI.Models.TypeOfInsurance", null)
                        .WithMany()
                        .HasForeignKey("ConnectedTypesOfInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseworkUI.Models.InsuranceRisk", null)
                        .WithMany()
                        .HasForeignKey("IncludedRisksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.Employee", b =>
                {
                    b.HasOne("CourseworkUI.Models.User", null)
                        .WithOne()
                        .HasForeignKey("CourseworkUI.Models.Employees.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkUI.Models.Users.Clients.Client", b =>
                {
                    b.HasOne("CourseworkUI.Models.User", null)
                        .WithOne()
                        .HasForeignKey("CourseworkUI.Models.Users.Clients.Client", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkUI.Models.Clients.LegalPerson", b =>
                {
                    b.HasOne("CourseworkUI.Models.Users.Clients.Client", null)
                        .WithOne()
                        .HasForeignKey("CourseworkUI.Models.Clients.LegalPerson", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkUI.Models.Clients.NaturalPerson", b =>
                {
                    b.HasOne("CourseworkUI.Models.Users.Clients.Client", null)
                        .WithOne()
                        .HasForeignKey("CourseworkUI.Models.Clients.NaturalPerson", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.Accountant", b =>
                {
                    b.HasOne("CourseworkUI.Models.Employees.Employee", null)
                        .WithOne()
                        .HasForeignKey("CourseworkUI.Models.Employees.Accountant", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.Admin", b =>
                {
                    b.HasOne("CourseworkUI.Models.Employees.Employee", null)
                        .WithOne()
                        .HasForeignKey("CourseworkUI.Models.Employees.Admin", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.InsuranceAgent", b =>
                {
                    b.HasOne("CourseworkUI.Models.Employees.Employee", null)
                        .WithOne()
                        .HasForeignKey("CourseworkUI.Models.Employees.InsuranceAgent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkUI.Models.Employees.Manager", b =>
                {
                    b.HasOne("CourseworkUI.Models.Employees.Employee", null)
                        .WithOne()
                        .HasForeignKey("CourseworkUI.Models.Employees.Manager", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkUI.Models.Users.Employees.Economist", b =>
                {
                    b.HasOne("CourseworkUI.Models.Employees.Employee", null)
                        .WithOne()
                        .HasForeignKey("CourseworkUI.Models.Users.Employees.Economist", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
